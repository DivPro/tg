// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package example

import (
	"context"
	"fmt"
	"github.com/DivPro/tg/v2/example/clients/example/hasher"
	"github.com/DivPro/tg/v2/example/clients/example/jsonrpc"
)

type ClientExampleRPC struct {
	*ClientJsonRPC
}

type retExampleRPCTest = func(ret1 int, ret2 string, err error)
type retExampleRPCTest2 = func(ret1 int, ret2 string, err error)

func (cli *ClientExampleRPC) Test(ctx context.Context, arg0 int, arg1 string, opts ...interface{}) (ret1 int, ret2 string, err error) {

	request := requestExampleRPCTest{
		Arg0: arg0,
		Arg1: arg1,
		Opts: opts,
	}
	var response responseExampleRPCTest
	var rpcResponse *jsonrpc.ResponseRPC
	cacheKey, _ := hasher.Hash(request)
	rpcResponse, err = cli.rpc.Call(ctx, "examplerpc.test", request)
	var fallbackCheck func(error) bool
	if cli.fallbackExampleRPC != nil {
		fallbackCheck = cli.fallbackExampleRPC.Test
	}
	if rpcResponse != nil && rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
	}
	if err = cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response); err != nil {
		return
	}
	return response.Ret1, response.Ret2, err
}

func (cli *ClientExampleRPC) ReqTest(ctx context.Context, callback retExampleRPCTest, arg0 int, arg1 string, opts ...interface{}) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "examplerpc.test",
		Params: requestExampleRPCTest{
			Arg0: arg0,
			Arg1: arg1,
			Opts: opts,
		},
	}}
	if callback != nil {
		var response responseExampleRPCTest
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			cacheKey, _ := hasher.Hash(request.rpcRequest.Params)
			var fallbackCheck func(error) bool
			if cli.fallbackExampleRPC != nil {
				fallbackCheck = cli.fallbackExampleRPC.Test
			}
			if rpcResponse != nil && rpcResponse.Error != nil {
				if cli.errorDecoder != nil {
					err = cli.errorDecoder(rpcResponse.Error.Raw())
				} else {
					err = fmt.Errorf(rpcResponse.Error.Message)
				}
			}
			callback(response.Ret1, response.Ret2, cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response))
		}
	}
	return
}

func (cli *ClientExampleRPC) Test2(ctx context.Context, arg0 int, arg1 string, opts ...interface{}) (ret1 int, ret2 string, err error) {

	request := requestExampleRPCTest2{
		Arg0: arg0,
		Arg1: arg1,
		Opts: opts,
	}
	var response responseExampleRPCTest2
	var rpcResponse *jsonrpc.ResponseRPC
	cacheKey, _ := hasher.Hash(request)
	rpcResponse, err = cli.rpc.Call(ctx, "examplerpc.test2", request)
	var fallbackCheck func(error) bool
	if cli.fallbackExampleRPC != nil {
		fallbackCheck = cli.fallbackExampleRPC.Test2
	}
	if rpcResponse != nil && rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
	}
	if err = cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response); err != nil {
		return
	}
	return response.Ret1, response.Ret2, err
}

func (cli *ClientExampleRPC) ReqTest2(ctx context.Context, callback retExampleRPCTest2, arg0 int, arg1 string, opts ...interface{}) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "examplerpc.test2",
		Params: requestExampleRPCTest2{
			Arg0: arg0,
			Arg1: arg1,
			Opts: opts,
		},
	}}
	if callback != nil {
		var response responseExampleRPCTest2
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			cacheKey, _ := hasher.Hash(request.rpcRequest.Params)
			var fallbackCheck func(error) bool
			if cli.fallbackExampleRPC != nil {
				fallbackCheck = cli.fallbackExampleRPC.Test2
			}
			if rpcResponse != nil && rpcResponse.Error != nil {
				if cli.errorDecoder != nil {
					err = cli.errorDecoder(rpcResponse.Error.Raw())
				} else {
					err = fmt.Errorf(rpcResponse.Error.Message)
				}
			}
			callback(response.Ret1, response.Ret2, cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response))
		}
	}
	return
}
