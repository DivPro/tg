// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package example

import (
	"context"
	"encoding/json"

	goUUID "github.com/google/uuid"

	"github.com/seniorGolang/tg/v2/example/interfaces/types"
)

type ClientUser struct {
	*ClientJsonRPC
}

type retUserGetUser func(user *types.User, err error)

func (cli *ClientUser) ReqGetUser(ret retUserGetUser, cookie string, userAgent string) (request baseJsonRPC) {

	request = baseJsonRPC{
		Method: "user.getuser",
		Params: requestUserGetUser{
			Cookie:    cookie,
			UserAgent: userAgent,
		},
		Version: Version,
	}
	var err error
	var response responseUserGetUser

	if ret != nil {
		request.retHandler = func(jsonrpcResponse baseJsonRPC) {
			if jsonrpcResponse.Error != nil {
				err = cli.errorDecoder(jsonrpcResponse.Error)
				ret(response.User, err)
				return
			}
			err = json.Unmarshal(jsonrpcResponse.Result, &response)
			ret(response.User, err)
		}
		request.ID = []byte("\"" + goUUID.New().String() + "\"")
	}
	return
}

func (cli *ClientUser) GetUser(ctx context.Context, cookie string, userAgent string) (user *types.User, err error) {

	retHandler := func(_user *types.User, _err error) {
		user = _user
		err = _err
	}
	if blockErr := cli.Batch(ctx, cli.ReqGetUser(retHandler, cookie, userAgent)); blockErr != nil {
		err = blockErr
		return
	}
	return
}
