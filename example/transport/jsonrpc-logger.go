// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/seniorGolang/dumper/viewer"
	"github.com/seniorGolang/tg/example/interfaces"
	"github.com/sirupsen/logrus"
	"time"
)

type loggerJsonRPC struct {
	next interfaces.JsonRPC
	log  logrus.FieldLogger
}

func loggerMiddlewareJsonRPC(log logrus.FieldLogger) MiddlewareJsonRPC {
	return func(next interfaces.JsonRPC) interfaces.JsonRPC {
		return &loggerJsonRPC{
			log:  log,
			next: next,
		}
	}
}

func (m loggerJsonRPC) Test(ctx context.Context, arg0 int, arg1 string, opts ...interface{}) (ret1 int, ret2 string, err error) {
	defer func(begin time.Time) {
		fields := logrus.Fields{
			"method": "test",
			"request": viewer.Sprintf("%+v", requestJsonRPCTest{
				Arg0: arg0,
				Arg1: arg1,
				Opts: opts,
			}),
			"response": viewer.Sprintf("%+v", responseJsonRPCTest{
				Ret1: ret1,
				Ret2: ret2,
			}),
			"service": "JsonRPC",
			"took":    time.Since(begin),
		}
		if ctx.Value(headerRequestID) != nil {
			fields["requestID"] = ctx.Value(headerRequestID)
		}
		if err != nil {
			m.log.WithError(err).WithFields(fields).Info("call test")
			return
		}
		m.log.WithFields(fields).Info("call test")
	}(time.Now())
	return m.next.Test(ctx, arg0, arg1, opts...)
}
