// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/gofiber/fiber/v2"
	otg "github.com/opentracing/opentracing-go"
	"github.com/opentracing/opentracing-go/ext"
	errors "github.com/pkg/errors"
	log "github.com/rs/zerolog/log"
	"github.com/seniorGolang/json"
	"strings"
	"sync"
)

const (
	defaultMaxParallelBatch = 10
	// Version defines the version of the JSON RPC implementation
	Version = "2.0"
	// contentTypeJson defines the content type to be served
	contentTypeJson = "application/json"
	// ParseError defines invalid JSON was received by the server
	// An error occurred on the server while parsing the JSON text
	parseError = -32700
	// InvalidRequestError defines the JSON sent is not a valid Request object
	invalidRequestError = -32600
	// MethodNotFoundError defines the method does not exist / is not available
	methodNotFoundError = -32601
	// InvalidParamsError defines invalid method parameter(s)
	invalidParamsError = -32602
	// InternalError defines a server error
	internalError = -32603
)

type idJsonRPC = json.RawMessage

type baseJsonRPC struct {
	ID      idJsonRPC       `json:"id"`
	Version string          `json:"jsonrpc"`
	Method  string          `json:"method,omitempty"`
	Error   *errorJsonRPC   `json:"error,omitempty"`
	Params  json.RawMessage `json:"params,omitempty"`
	Result  json.RawMessage `json:"result,omitempty"`
}

type errorJsonRPC struct {
	Code    int         `json:"code"`
	Message string      `json:"message"`
	Data    interface{} `json:"data,omitempty"`
}

func (err errorJsonRPC) Error() string {
	return err.Message
}

type jsonrpcResponses []baseJsonRPC

func (responses *jsonrpcResponses) append(response *baseJsonRPC) {
	if response == nil {
		return
	}
	if response.ID != nil {
		*responses = append(*responses, *response)
	}
}
func (srv *Server) serveBatch(ctx *fiber.Ctx) (err error) {

	var single bool
	var requests []baseJsonRPC
	batchSpan := otg.SpanFromContext(ctx.UserContext())
	methodHTTP := ctx.Method()
	if methodHTTP != fiber.MethodPost {
		ext.Error.Set(batchSpan, true)
		batchSpan.SetTag("msg", "only POST method supported")
		ctx.Response().SetStatusCode(fiber.StatusMethodNotAllowed)
		if _, err = ctx.WriteString("only POST method supported"); err != nil {
			return
		}
		return
	}
	if err = json.Unmarshal(ctx.Body(), &requests); err != nil {
		var request baseJsonRPC
		if err = json.Unmarshal(ctx.Body(), &request); err != nil {
			ext.Error.Set(batchSpan, true)
			batchSpan.SetTag("msg", "request body could not be decoded: "+err.Error())
			return sendResponse(ctx, makeErrorResponseJsonRPC([]byte("\"0\""), parseError, "request body could not be decoded: "+err.Error(), nil))
		}
		single = true
		requests = append(requests, request)
	}
	if single {
		return sendResponse(ctx, srv.doSingleBatch(ctx.UserContext(), requests[0]))
	}
	return sendResponse(ctx, srv.doBatch(ctx.UserContext(), requests))
}
func (srv *Server) doBatch(ctx context.Context, requests []baseJsonRPC) (responses jsonrpcResponses) {

	var wg sync.WaitGroup
	batchSize := srv.maxParallelBatch
	if len(requests) < batchSize {
		batchSize = len(requests)
	}
	callCh := make(chan baseJsonRPC, batchSize)
	for i := 0; i < batchSize; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			for request := range callCh {
				response := srv.doSingleBatch(ctx, request)
				if request.ID != nil {
					responses.append(response)
				}
			}
		}()
	}
	for idx := range requests {
		callCh <- requests[idx]
	}
	close(callCh)
	wg.Wait()
	return
}
func (srv *Server) doSingleBatch(ctx context.Context, request baseJsonRPC) (response *baseJsonRPC) {

	methodNameOrigin := request.Method
	method := strings.ToLower(request.Method)
	batchSpan := otg.SpanFromContext(ctx)
	span := otg.StartSpan(request.Method, otg.ChildOf(batchSpan.Context()))
	defer span.Finish()
	ctx = otg.ContextWithSpan(ctx, span)
	defer func() {
		if r := recover(); r != nil {
			err := errors.New("call method panic")
			if request.ID != nil {
				response = makeErrorResponseJsonRPC(request.ID, invalidRequestError, "panic on method '"+methodNameOrigin+"'", err)
			}
			log.Ctx(ctx).Error().Stack().Err(err).Msg("panic occurred")
		}
	}()
	switch method {
	case "examplerpc.test":
		return srv.httpExampleRPC.test(ctx, request)
	default:
		ext.Error.Set(span, true)
		span.SetTag("msg", "invalid method '"+methodNameOrigin+"'")
		return makeErrorResponseJsonRPC(request.ID, methodNotFoundError, "invalid method '"+methodNameOrigin+"'", nil)
	}
}

type methodJsonRPC func(ctx context.Context, requestBase baseJsonRPC) (responseBase *baseJsonRPC)

func makeErrorResponseJsonRPC(id idJsonRPC, code int, msg string, data interface{}) *baseJsonRPC {

	if id == nil {
		return nil
	}

	return &baseJsonRPC{
		Error: &errorJsonRPC{
			Code:    code,
			Data:    data,
			Message: msg,
		},
		ID:      id,
		Version: Version,
	}
}
