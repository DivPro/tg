// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"encoding/json"
	"io"

	"github.com/gofiber/fiber/v2"
	"github.com/rs/zerolog"
)

const maxRequestBodySize = 104857600
const headerRequestID = "X-Request-Id"

type Server struct {
	log zerolog.Logger

	httpAfter  []Handler
	httpBefore []Handler

	config fiber.Config

	srvHTTP   *fiber.App
	srvHealth *fiber.App

	reporterCloser io.Closer
	httpExampleRPC *httpExampleRPC
	httpUser       *httpUser
}

func New(log zerolog.Logger, options ...Option) (srv *Server) {

	srv = &Server{
		config: fiber.Config{
			BodyLimit:             maxRequestBodySize,
			DisableStartupMessage: true,
		},
		log: log,
	}
	for _, option := range options {
		option(srv)
	}
	srv.srvHTTP = fiber.New(srv.config)
	srv.srvHTTP.Post("/", srv.serveBatch)
	for _, option := range options {
		option(srv)
	}
	return
}

func (srv *Server) Fiber() *fiber.App {
	return srv.srvHTTP
}

func (srv *Server) WithLog(log zerolog.Logger) *Server {
	if srv.httpExampleRPC != nil {
		srv.httpExampleRPC = srv.ExampleRPC().WithLog(log)
	}
	if srv.httpUser != nil {
		srv.httpUser = srv.User().WithLog(log)
	}
	return srv
}

func (srv *Server) ServeHealth(address string, response interface{}) {
	srv.srvHealth = fiber.New(fiber.Config{DisableStartupMessage: true})
	srv.srvHealth.Get("/", func(ctx *fiber.Ctx) error {
		return ctx.JSON(response)
	})
	go func() {
		err := srv.srvHealth.Listen(address)
		ExitOnError(srv.log, err, "serve health on "+address)
	}()
}

func sendResponse(log zerolog.Logger, ctx *fiber.Ctx, resp interface{}) {
	ctx.Response().Header.SetContentType("application/json")
	if err := json.NewEncoder(ctx).Encode(resp); err != nil {
		log.Error().Err(err).Str("body", string(ctx.Body())).Msg("response write error")
	}
}

func (srv *Server) Shutdown() {
	if srv.srvHTTP != nil {
		_ = srv.srvHTTP.Shutdown()
	}
	if srv.srvHealth != nil {
		_ = srv.srvHealth.Shutdown()
	}
	if srvMetrics != nil {
		_ = srvMetrics.Shutdown()
	}
}

func (srv *Server) WithTrace() *Server {
	if srv.httpExampleRPC != nil {
		srv.httpExampleRPC = srv.ExampleRPC().WithTrace()
	}
	if srv.httpUser != nil {
		srv.httpUser = srv.User().WithTrace()
	}
	return srv
}

func (srv *Server) WithMetrics() *Server {
	if srv.httpExampleRPC != nil {
		srv.httpExampleRPC = srv.ExampleRPC().WithMetrics()
	}
	if srv.httpUser != nil {
		srv.httpUser = srv.User().WithMetrics()
	}
	return srv
}

func (srv Server) ExampleRPC() *httpExampleRPC {
	return srv.httpExampleRPC
}

func (srv Server) User() *httpUser {
	return srv.httpUser
}
