// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/opentracing/opentracing-go"
	"github.com/opentracing/opentracing-go/ext"
	"github.com/savsgio/gotils"
	"github.com/valyala/fasthttp"

	"github.com/seniorGolang/tg/example/implement"
)

func (http *httpUser) getUser(ctx context.Context, request requestUserGetUser) (response responseUserGetUser, err error) {

	span := opentracing.SpanFromContext(ctx)
	response.User, err = http.svc.GetUser(ctx, request.Cookie, request.UserAgent)

	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
		errData := toString(err)
		ext.Error.Set(span, true)
		span.SetTag("msg", err.Error())

		if errData != "{}" {
			span.SetTag("errData", errData)
		}
	}
	return
}

func (http *httpUser) serveGetUser(ctx *fasthttp.RequestCtx) {

	span := extractSpan(http.log, fmt.Sprintf("jsonRPC:%s", gotils.B2S(ctx.URI().Path())), ctx)
	defer injectSpan(http.log, span, ctx)
	defer span.Finish()

	for _, handler := range http.httpBefore {
		handler(ctx)
	}

	if value := ctx.Value(CtxCancelRequest); value != nil {
		ext.Error.Set(span, true)
		span.SetTag("msg", "request canceled")
		return
	}

	var err error
	var request requestUserGetUser
	ctx.SetStatusCode(204)

	if _userAgent := gotils.B2S(ctx.Request.Header.Peek("User-Agent")); _userAgent != "" {
		request.UserAgent = _userAgent
	}

	if _cookie := gotils.B2S(ctx.Request.Header.Cookie("sessionCookie")); _cookie != "" {
		request.Cookie = _cookie
	}

	var result interface{}

	var response responseUserGetUser
	response, err = http.getUser(opentracing.ContextWithSpan(ctx, span), request)
	result = response

	if err != nil {
		result = err
		if errCoder, ok := err.(withErrorCode); ok {
			ctx.SetStatusCode(errCoder.Code())
		} else {
			ctx.SetStatusCode(fasthttp.StatusInternalServerError)
		}
	}

	for _, handler := range http.httpAfter {
		handler(ctx)
	}
	sendResponse(http.log, ctx, result)
}

func (http *httpUser) uploadFile(ctx context.Context, request requestUserUploadFile) (response responseUserUploadFile, err error) {

	span := opentracing.SpanFromContext(ctx)
	err = http.svc.UploadFile(ctx, request.FileBytes)

	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
		errData := toString(err)
		ext.Error.Set(span, true)
		span.SetTag("msg", err.Error())

		if errData != "{}" {
			span.SetTag("errData", errData)
		}
	}
	return
}

func (http *httpUser) serveUploadFile(ctx *fasthttp.RequestCtx) {

	span := extractSpan(http.log, fmt.Sprintf("jsonRPC:%s", gotils.B2S(ctx.URI().Path())), ctx)
	defer injectSpan(http.log, span, ctx)
	defer span.Finish()

	for _, handler := range http.httpBefore {
		handler(ctx)
	}

	if value := ctx.Value(CtxCancelRequest); value != nil {
		ext.Error.Set(span, true)
		span.SetTag("msg", "request canceled")
		return
	}

	var err error
	var request requestUserUploadFile

	if request.FileBytes, err = uploadFile(ctx, "fileBytes"); err != nil {
		ext.Error.Set(span, true)
		span.SetTag("msg", "upload file 'fileBytes' error: "+err.Error())

		for _, handler := range http.httpAfter {
			handler(ctx)
		}
		ctx.SetStatusCode(fasthttp.StatusBadRequest)
		sendResponse(http.log, ctx, "upload file 'fileBytes' error: "+err.Error())
		return
	}
	var result interface{}

	var response responseUserUploadFile
	response, err = http.uploadFile(opentracing.ContextWithSpan(ctx, span), request)
	result = response

	if err != nil {
		result = err
		if errCoder, ok := err.(withErrorCode); ok {
			ctx.SetStatusCode(errCoder.Code())
		} else {
			ctx.SetStatusCode(fasthttp.StatusInternalServerError)
		}
	}

	for _, handler := range http.httpAfter {
		handler(ctx)
	}
	sendResponse(http.log, ctx, result)
}

func (http *httpUser) customResponse(ctx context.Context, request requestUserCustomResponse) (response responseUserCustomResponse, err error) {

	span := opentracing.SpanFromContext(ctx)
	err = http.svc.CustomResponse(ctx, request.Arg0, request.Arg1, request.Opts...)

	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
		errData := toString(err)
		ext.Error.Set(span, true)
		span.SetTag("msg", err.Error())

		if errData != "{}" {
			span.SetTag("errData", errData)
		}
	}
	return
}

func (http *httpUser) serveCustomResponse(ctx *fasthttp.RequestCtx) {

	span := extractSpan(http.log, fmt.Sprintf("jsonRPC:%s", gotils.B2S(ctx.URI().Path())), ctx)
	defer injectSpan(http.log, span, ctx)
	defer span.Finish()

	for _, handler := range http.httpBefore {
		handler(ctx)
	}

	if value := ctx.Value(CtxCancelRequest); value != nil {
		ext.Error.Set(span, true)
		span.SetTag("msg", "request canceled")
		return
	}

	var err error
	var request requestUserCustomResponse

	if err = json.Unmarshal(ctx.Request.Body(), &request); err != nil {
		ext.Error.Set(span, true)
		span.SetTag("msg", "request body could not be decoded: "+err.Error())
		ctx.Response.SetStatusCode(fasthttp.StatusBadRequest)
		ctx.WriteString("request body could not be decoded: " + err.Error())
		return
	}

	_, err = http.customResponse(opentracing.ContextWithSpan(ctx, span), request)
	implement.CustomResponseHandler(http.log, ctx, err)
}

func (http *httpUser) customHandler(ctx context.Context, request requestUserCustomHandler) (response responseUserCustomHandler, err error) {

	span := opentracing.SpanFromContext(ctx)
	err = http.svc.CustomHandler(ctx, request.Arg0, request.Arg1, request.Opts...)

	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
		errData := toString(err)
		ext.Error.Set(span, true)
		span.SetTag("msg", err.Error())

		if errData != "{}" {
			span.SetTag("errData", errData)
		}
	}
	return
}

func (http *httpUser) serveCustomHandler(ctx *fasthttp.RequestCtx) {

	span := extractSpan(http.log, fmt.Sprintf("jsonRPC:%s", gotils.B2S(ctx.URI().Path())), ctx)
	defer injectSpan(http.log, span, ctx)
	defer span.Finish()

	for _, handler := range http.httpBefore {
		handler(ctx)
	}

	if value := ctx.Value(CtxCancelRequest); value != nil {
		ext.Error.Set(span, true)
		span.SetTag("msg", "request canceled")
		return
	}

	var err error
	var request requestUserCustomHandler

	if err = json.Unmarshal(ctx.Request.Body(), &request); err != nil {
		ext.Error.Set(span, true)
		span.SetTag("msg", "request body could not be decoded: "+err.Error())
		ctx.Response.SetStatusCode(fasthttp.StatusBadRequest)
		ctx.WriteString("request body could not be decoded: " + err.Error())
		return
	}

	var result interface{}

	var response responseUserCustomHandler
	response, err = http.customHandler(opentracing.ContextWithSpan(ctx, span), request)
	result = response

	if err != nil {
		result = err
		if errCoder, ok := err.(withErrorCode); ok {
			ctx.SetStatusCode(errCoder.Code())
		} else {
			ctx.SetStatusCode(fasthttp.StatusInternalServerError)
		}
	}

	for _, handler := range http.httpAfter {
		handler(ctx)
	}
	sendResponse(http.log, ctx, result)
}
