// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"fmt"
	"github.com/go-kit/kit/metrics"
	"github.com/seniorGolang/tg/example/interfaces"
	"time"
)

type metricsJsonRPC struct {
	next            interfaces.JsonRPC
	requestCount    metrics.Counter
	requestCountAll metrics.Counter
	requestLatency  metrics.Histogram
}

func metricsMiddlewareJsonRPC(next interfaces.JsonRPC) interfaces.JsonRPC {
	return &metricsJsonRPC{
		next:            next,
		requestCount:    RequestCount.With("service", "JsonRPC"),
		requestCountAll: RequestCountAll.With("service", "JsonRPC"),
		requestLatency:  RequestLatency.With("service", "JsonRPC"),
	}
}

func (m metricsJsonRPC) Test(ctx context.Context, arg0 int, arg1 string, opts ...interface{}) (ret1 int, ret2 string, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "test", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "test", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "test").Add(1)

	return m.next.Test(ctx, arg0, arg1, opts...)
}
