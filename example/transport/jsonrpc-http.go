// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"github.com/gofiber/fiber/v2"
	"github.com/rs/zerolog"

	"github.com/seniorGolang/tg/example/interfaces"
)

type httpJsonRPC struct {
	log          zerolog.Logger
	errorHandler ErrorHandler
	svc          *serverJsonRPC
	base         interfaces.JsonRPC
}

func NewJsonRPC(log zerolog.Logger, svcJsonRPC interfaces.JsonRPC) (srv *httpJsonRPC) {

	srv = &httpJsonRPC{
		base: svcJsonRPC,
		log:  log,
		svc:  newServerJsonRPC(svcJsonRPC),
	}
	return
}

func (http httpJsonRPC) Service() MiddlewareSetJsonRPC {
	return http.svc
}

func (http *httpJsonRPC) WithLog(log zerolog.Logger) *httpJsonRPC {
	http.svc.WithLog(log)
	return http
}

func (http *httpJsonRPC) WithTrace() *httpJsonRPC {
	http.svc.WithTrace()
	return http
}

func (http *httpJsonRPC) WithMetrics() *httpJsonRPC {
	http.svc.WithMetrics()
	return http
}

func (http *httpJsonRPC) WithErrorHandler(handler ErrorHandler) *httpJsonRPC {
	http.errorHandler = handler
	return http
}

func (http *httpJsonRPC) SetRoutes(route *fiber.App) {
	route.Post("/jsonrpc", http.serveBatch)
	route.Post("/jsonRPC/test", http.serveTest)
}
