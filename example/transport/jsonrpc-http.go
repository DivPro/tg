// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"time"

	"github.com/fasthttp/router"
	"github.com/lab259/cors"
	"github.com/sirupsen/logrus"
	"github.com/valyala/fasthttp"

	"github.com/seniorGolang/tg/example/interfaces"
)

type httpJsonRPC struct {
	*httpServer
	svc *serverJsonRPC
}

func NewJsonRPC(log logrus.FieldLogger, svcJsonRPC interfaces.JsonRPC) (srv *httpJsonRPC) {

	srv = &httpJsonRPC{
		httpServer: &httpServer{
			log:                log,
			maxRequestBodySize: maxRequestBodySize,
		},
		svc: newServerJsonRPC(svcJsonRPC),
	}
	return
}

func (http httpJsonRPC) JsonRPC() MiddlewareSetJsonRPC {
	return http.svc
}

func (http *httpJsonRPC) WithLog(log logrus.FieldLogger) *httpJsonRPC {
	http.svc.WithLog(log)
	return http
}

func (http *httpJsonRPC) WithTrace() *httpJsonRPC {
	http.svc.WithTrace()
	return http
}

func (http *httpJsonRPC) ServeHTTP(address string, options ...Option) {

	http.applyOptions(options...)

	route := router.New()

	route.POST("/jsonrpc", http.serveBatch)
	route.POST("/jsonRPC/test", http.serveTest)

	http.log.WithField("address", address).Info("enable 'JsonRPC' HTTP transport")

	http.srvHttp = &fasthttp.Server{
		Handler:            cors.AllowAll().Handler(route.Handler),
		MaxRequestBodySize: http.maxRequestBodySize,
		ReadTimeout:        time.Second * 10,
	}

	go func() {
		err := http.srvHttp.ListenAndServe(address)
		ExitOnError(http.log, err, "serve 'JsonRPC' http on "+address)
	}()
}
