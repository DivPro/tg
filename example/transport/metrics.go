// GENERATED BY i2s. DO NOT EDIT.
package transport

import (
	kitPrometheus "github.com/go-kit/kit/metrics/prometheus"
	"github.com/gofiber/adaptor/v2"
	"github.com/gofiber/fiber/v2"
	stdPrometheus "github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	logrus "github.com/sirupsen/logrus"
)

var srvMetrics *fiber.App
var RequestCount = kitPrometheus.NewCounterFrom(stdPrometheus.CounterOpts{
	Help:      "Number of requests received",
	Name:      "count",
	Namespace: "service",
	Subsystem: "requests",
}, []string{"method", "service", "success"})
var RequestCountAll = kitPrometheus.NewCounterFrom(stdPrometheus.CounterOpts{
	Help:      "Number of all requests received",
	Name:      "all_count",
	Namespace: "service",
	Subsystem: "requests",
}, []string{"method", "service"})
var RequestLatency = kitPrometheus.NewSummaryFrom(stdPrometheus.SummaryOpts{
	Help:      "Total duration of requests in microseconds",
	Name:      "latency_microseconds",
	Namespace: "service",
	Subsystem: "requests",
}, []string{"method", "service", "success"})

func ServeMetrics(log logrus.FieldLogger, address string) {
	srvMetrics = fiber.New()
	srvMetrics.All("/", adaptor.HTTPHandler(promhttp.Handler()))
	go func() {
		err := srvMetrics.Listen(address)
		ExitOnError(log, err, "serve metrics on "+address)
	}()
}
