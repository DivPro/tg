// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"time"

	"github.com/fasthttp/router"
	"github.com/lab259/cors"
	"github.com/sirupsen/logrus"
	"github.com/valyala/fasthttp"

	"github.com/seniorGolang/tg/example/interfaces"
)

type httpUser struct {
	*httpServer
	svc *serverUser
}

func NewUser(log logrus.FieldLogger, svcUser interfaces.User) (srv *httpUser) {

	srv = &httpUser{
		httpServer: &httpServer{
			log:                log,
			maxRequestBodySize: maxRequestBodySize,
		},
		svc: newServerUser(svcUser),
	}
	return
}

func (http httpUser) User() MiddlewareSetUser {
	return http.svc
}

func (http *httpUser) WithLog(log logrus.FieldLogger) *httpUser {
	http.svc.WithLog(log)
	return http
}

func (http *httpUser) WithTrace() *httpUser {
	http.svc.WithTrace()
	return http
}

func (http *httpUser) ServeHTTP(address string, options ...Option) {

	http.applyOptions(options...)

	route := router.New()

	route.GET("/api/v2/user/info", http.serveGetUser)
	route.POST("/api/v2/user/file", http.serveUploadFile)
	route.PATCH("/api/v2/user/custom/response", http.serveCustomResponse)
	route.DELETE("/api/v2/user/custom", http.serveCustomHandler)

	http.log.WithField("address", address).Info("enable 'User' HTTP transport")

	http.srvHttp = &fasthttp.Server{
		Handler:            cors.AllowAll().Handler(route.Handler),
		MaxRequestBodySize: http.maxRequestBodySize,
		ReadTimeout:        time.Second * 10,
	}

	go func() {
		err := http.srvHttp.ListenAndServe(address)
		ExitOnError(http.log, err, "serve 'User' http on "+address)
	}()
}
